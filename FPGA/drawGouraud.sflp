
%i "inv_table.h"
%i "mul_s25x16.h"
%i "mul_s17x16.h"
%i "mul_s10.h"

circuit drawGouraud
{
	input vx1<10>, vy1<10>, vc1<24>; // A点
	input vx2<10>, vy2<10>, vc2<24>; // B点
	input vx3<10>, vy3<10>, vc3<24>; // C点
	input x<10>, scanline<10>;
	input enable;
	instrin con(vx1, vy1, vc1, vx2, vy2, vc2, vx3, vy3, vc3, x, scanline, enable);

	instrin vblank_begin, hblank_begin, htiming;
	reg_wr y<10>;

	// Yソート後
	reg_wr x1<10>, y1<10>, r1<8>, g1<8>, b1<8>;
	reg_wr x2<10>, y2<10>, r2<8>, g2<8>, b2<8>;
	reg_wr x3<10>, y3<10>, r3<8>, g3<8>, b3<8>;

	inv_table inv_t;
	mul_s17x16 mulc;

	reg_wr sy<10>, ey<10>;
	reg_wr sx<10>, ex<10>;
	reg_wr ar<16>, ag<16>, ab<16>;
	reg_wr pr<16>, pg<16>, pb<16>;

	reg_wr f_y_en, f_x_en;

	output view_on;
	output out_R<8>, out_G<8>, out_B<8>;

output dbg;
reg_wr dbg_reg;
output eval_out<20>;

	stage_name vertex_change { task do(); }
	stage_name bilinear_vbase { task do(); }
	stage_name bilinear_hbase { task do(); }

dbg = dbg_reg;

	instruct vblank_begin par{
		f_y_en := 0b0;
		generate vertex_change.do();
	}

	instruct hblank_begin par{
		y := scanline + 1;
		any{
			(scanline+1)==sy : f_y_en := 0b1;
			scanline==ey : f_y_en := 0b0;
		}
		if(((scanline+1)==sy) | f_y_en) generate bilinear_hbase.do();
	}

	alt{
		(x==sx) & ^bilinear_hbase.do & (sx!=ex) : f_x_en := 0b1;
		x==ex : f_x_en := 0b0;
	}

	view_on = enable & f_y_en & f_x_en;

	instruct htiming par{
		if(f_x_en){
			pr += ar;
			pg += ag;
			pb += ab;
		}
	}

	out_R = pr<15:8>;
	out_G = pg<15:8>;
	out_B = pb<15:8>;

	stage vertex_change {
		reg_wr tx1<10>, ty1<10>, tc1<24>;
		reg_wr tx2<10>, ty2<10>, tc2<24>;
		reg_wr tx3<10>, ty3<10>, tc3<24>;
		first_state st1;
		state st1 par{
			tx1 := vx1; ty1 := vy1; tc1 := vc1;
			tx2 := vx2; ty2 := vy2; tc2 := vc2;
			tx3 := vx3; ty3 := vy3; tc3 := vc3;
			goto st2;
		}
		state st2 par{
			if((ty2-ty1)<9>){ // ty1 > ty2
				tx1 := tx2; ty1 := ty2; tc1 := tc2;
				tx2 := tx1; ty2 := ty1; tc2 := tc1;
			}
			goto st3;
		}
		state st3 par{
			if((ty3-ty1)<9>){ // ty1 > ty3
				tx1 := tx3; ty1 := ty3; tc1 := tc3;
				tx3 := tx1; ty3 := ty1; tc3 := tc1;
			}
			goto st4;
		}
		state st4 par{
			if((ty3-ty2)<9>){ // ty2 > ty3
				tx2 := tx3; ty2 := ty3; tc2 := tc3;
				tx3 := tx2; ty3 := ty2; tc3 := tc2;
			}
			goto st5;
		}
		state st5 par{
			x1 := tx1; y1 := ty1; r1 := tc1<23:16>; g1 := tc1<15:8>; b1 := tc1<7:0>;
			x2 := tx2; y2 := ty2; r2 := tc2<23:16>; g2 := tc2<15:8>; b2 := tc2<7:0>;
			x3 := tx3; y3 := ty3; r3 := tc3<23:16>; g3 := tc3<15:8>; b3 := tc3<7:0>;
			sy := ty1;
			ey := ty3;
			goto st1;
			generate bilinear_vbase.do();
			finish;
		}
	}

	stage bilinear_vbase {
		mul_s25x16 mulx;
		reg_wr x12<25>, x13<25>, x23<25>;
		reg_wr ax12<25>, ax13<25>, ax23<25>;
		reg_wr r12<16>, g12<16>, b12<16>;
		reg_wr r13<16>, g13<16>, b13<16>;
		reg_wr r23<16>, g23<16>, b23<16>;
		reg_wr ar12<16>, ag12<16>, ab12<16>;
		reg_wr ar13<16>, ag13<16>, ab13<16>;
		reg_wr ar23<16>, ag23<16>, ab23<16>;
		first_state st1;
		state st1 par{
			x12 := x1 || 15#0b0;
			x13 := x1 || 15#0b0;
			x23 := x2 || 15#0b0;

			inv_t.read(y2-y1);
			goto st_ax12;
		}
		state st_ax12 par{
			// (<10>||<15>)*<u16> = <41>
			ax12 := mulx.con((x2-x1)||15#0b0, inv_t.dout).dout<39:15>;
			inv_t.read(y3-y1);
			goto st_ax13;
		}
		state st_ax13 par{
			ax13 := mulx.con((x3-x1)||15#0b0, inv_t.dout).dout<39:15>;
			inv_t.read(y3-y2);
			goto st_ax23;
		}
		state st_ax23 par{
			ax23 := mulx.con((x3-x2)||15#0b0, inv_t.dout).dout<39:15>;

			inv_t.read(y2-y1);
			goto st_ar12;
		}
		state st_ar12 par{
			// 9#<8>||<8> * <16> = <32>
			ar12 := mulc.con(((0b0||r2)-(0b0||r1))||8#0b0, inv_t.dout).dout<30:15>;
			goto st_ag12;
		}
		state st_ag12 par{
			ag12 := mulc.con(((0b0||g2)-(0b0||g1))||8#0b0, inv_t.dout).dout<30:15>;
			goto st_ab12;
		}
		state st_ab12 par{
			ab12 := mulc.con(((0b0||b2)-(0b0||b1))||8#0b0, inv_t.dout).dout<30:15>;

			inv_t.read(y3-y1);
			goto st_ar13;
		}
		state st_ar13 par{
			ar13 := mulc.con(((0b0||r3)-(0b0||r1))||8#0b0, inv_t.dout).dout<30:15>;
			goto st_ag13;
		}
		state st_ag13 par{
			ag13 := mulc.con(((0b0||g3)-(0b0||g1))||8#0b0, inv_t.dout).dout<30:15>;
			goto st_ab13;
		}
		state st_ab13 par{
			ab13 := mulc.con(((0b0||b3)-(0b0||b1))||8#0b0, inv_t.dout).dout<30:15>;

			inv_t.read(y3-y2);
			goto st_ar23;
		}
		state st_ar23 par{
			ar23 := mulc.con(((0b0||r3)-(0b0||r2))||8#0b0, inv_t.dout).dout<30:15>;
			goto st_ag23;
		}
		state st_ag23 par{
			ag23 := mulc.con(((0b0||g3)-(0b0||g2))||8#0b0, inv_t.dout).dout<30:15>;
			goto st_ab23;
		}
		state st_ab23 par{
			ab23 := mulc.con(((0b0||b3)-(0b0||b2))||8#0b0, inv_t.dout).dout<30:15>;

			r12 := r1 || 8#0b0;
			g12 := g1 || 8#0b0;
			b12 := b1 || 8#0b0;
			r13 := r1 || 8#0b0;
			g13 := g1 || 8#0b0;
			b13 := b1 || 8#0b0;
			r23 := r2 || 8#0b0;
			g23 := g2 || 8#0b0;
			b23 := b2 || 8#0b0;
			goto st1;
			finish;
		}
	}

	stage bilinear_hbase {
		mul_s10 mule1, mule2;
		sel eval<20>;
		sel sr<8>, sg<8>, sb<8>;
		sel er<8>, eg<8>, eb<8>;
		first_state st1;
		par{
			eval = mule1.con(y3-y1, x2-x1).dout - mule2.con(x3-x1, y2-y1).dout;
eval_out = eval;
			if(eval<16>){ // 左に凸
				if(((y2-y)<9>==0b0) & (y1!=y2)){ // 上
					sr = r12<15:8>; sg = g12<15:8>; sb = b12<15:8>;
				}
				else{ // 下
					sr = r23<15:8>; sg = g23<15:8>; sb = b23<15:8>;
				}
				er = r13<15:8>; eg = g13<15:8>; eb = b13<15:8>;
			}
			else{ // 右に凸
				sr = r13<15:8>; sg = g13<15:8>; sb = b13<15:8>;
				if(((y2-y)<9>==0b0) & (y1!=y2)){ // 上
					er = r12<15:8>; eg = g12<15:8>; eb = b12<15:8>;
				}
				else{ // 下
					er = r23<15:8>; eg = g23<15:8>; eb = b23<15:8>;
				}
			}
		}
		state st1 par{
			f_x_en := 0b0;
			if(eval<16>){ // 左に凸
				if(((y2-y)<9>==0b0) & (y1!=y2)){ // 上
					sx := x12<24:15>;
				}
				else{ // 下
					sx := x23<24:15>;
				}
				ex := x13<24:15>;
			}
			else{ // 右に凸
				sx := x13<24:15>;
				if(((y2-y)<9>==0b0) & (y1!=y2)){ // 上
					ex := x12<24:15>;
				}
				else{ // 下
					ex := x23<24:15>;
				}
			}
			goto st2;
		}
		state st2 par{
			if((ex-sx)<9>){ // sx > ex
				sx := 640;
				goto st1;
				finish;
			}
			else goto st_ar;

			inv_t.read(ex-sx);
		}
		state st_ar par{
			ar := mulc.con(((0b0||er)-(0b0||sr))||8#0b0, inv_t.dout).dout<30:15>;
			goto st_ag;
		}
		state st_ag par{
			ag := mulc.con(((0b0||eg)-(0b0||sg))||8#0b0, inv_t.dout).dout<30:15>;
			goto st_ab;
		}
		state st_ab par{
			ab := mulc.con(((0b0||eb)-(0b0||sb))||8#0b0, inv_t.dout).dout<30:15>;

			pr := sr || 8#0b0;
			pg := sg || 8#0b0;
			pb := sb || 8#0b0;

			if(((y2-y)<9>==0b0) & (y1!=y2)){ // 上
				x12 += ax12;
				r12 += ar12;
				g12 += ag12;
				b12 += ab12;
			}
			else{
				x23 += ax23;
				r23 += ar23;
				g23 += ag23;
				b23 += ab23;
			}
			x13 += ax13;
			r13 += ar13;
			g13 += ag13;
			b13 += ab13;
			goto st1;
			finish;
		}
	}

}
